name: Security Tests and Coverage

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  test-and-security:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nubemgenesis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: |
        echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - uses: actions/cache@v3
      name: Setup pnpm cache
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run linter
      run: pnpm lint || true
      
    - name: Run security audit
      run: |
        pnpm audit --production || true
        npm audit --production || true
      
    - name: Run tests with coverage
      env:
        NODE_ENV: test
        DATABASE_TYPE: postgres
        DATABASE_HOST: localhost
        DATABASE_PORT: 5432
        DATABASE_USER: postgres
        DATABASE_PASSWORD: postgres
        DATABASE_NAME: nubemgenesis_test
        REDIS_URL: redis://localhost:6379
        API_KEY_MASTER_KEY: test-master-key-32-characters-long
        JWT_SECRET: test-jwt-secret-32-characters-long!!
        SESSION_SECRET: test-session-secret-32-characters!!
        DISABLE_TELEMETRY: true
        LOG_LEVEL: error
      run: |
        cd packages/server
        pnpm test --coverage --passWithNoTests || npm test -- --coverage --passWithNoTests
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./packages/server/coverage/lcov.info
        flags: server
        name: server-coverage
        fail_ci_if_error: false
        
    - name: Generate coverage badge
      run: |
        cd packages/server
        if [ -f coverage/coverage-summary.json ]; then
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct' || echo "0")
          echo "Coverage: $coverage%"
          
          # Color based on coverage
          if (( $(echo "$coverage >= 80" | bc -l) )); then
            color="brightgreen"
          elif (( $(echo "$coverage >= 60" | bc -l) )); then
            color="yellow"
          else
            color="red"
          fi
          
          # Create coverage badge
          echo "![Coverage](https://img.shields.io/badge/coverage-$coverage%25-$color)" > ../../coverage-badge.md
        fi
        
    - name: Check coverage threshold
      run: |
        cd packages/server
        if [ -f coverage/coverage-summary.json ]; then
          coverage=$(cat coverage/coverage-summary.json | jq '.total.lines.pct' || echo "0")
          echo "Coverage: $coverage%"
          if (( $(echo "$coverage < 60" | bc -l) )); then
            echo "::warning::Coverage is below 60% threshold ($coverage%)"
          else
            echo "::notice::Coverage meets threshold ($coverage%)"
          fi
        fi
    
    - name: Build application
      run: pnpm build
      
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        ignore-unfixed: true
        
    - name: Run OWASP dependency check
      uses: dependency-check/Dependency-Check_Action@main
      with:
        project: 'NubemGenesis'
        path: '.'
        format: 'HTML'
        args: >
          --enableRetired
          --enableExperimental
        
    - name: Upload OWASP results
      uses: actions/upload-artifact@v3
      with:
        name: OWASP-dependency-check-results
        path: reports/
        
    - name: SonarCloud Scan (if configured)
      if: github.event_name != 'pull_request' && env.SONAR_TOKEN != ''
      uses: SonarSource/sonarcloud-github-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        
  docker-security:
    runs-on: ubuntu-latest
    needs: test-and-security
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Run Hadolint on Dockerfiles
      run: |
        docker run --rm -i hadolint/hadolint < Dockerfile || true
        find . -name "Dockerfile*" -exec echo "Scanning {}" \; -exec docker run --rm -i hadolint/hadolint < {} \; || true
        
    - name: Build Docker image for scanning
      run: |
        if [ -f Dockerfile ]; then
          docker build -t nubemgenesis:scan .
        fi
        
    - name: Run Trivy on Docker image
      if: success()
      run: |
        if [ -f Dockerfile ]; then
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy image nubemgenesis:scan
        fi