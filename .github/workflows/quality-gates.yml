name: Quality Gates & Security Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  quality-analysis:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Get pnpm store directory
      id: pnpm-cache
      shell: bash
      run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
    - name: Setup pnpm cache
      uses: actions/cache@v3
      with:
        path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
        key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-pnpm-store-
          
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Lint code
      run: pnpm run lint
      
    - name: Type check
      run: pnpm run type-check
      
    - name: Run unit tests
      run: pnpm run test:unit --coverage
      
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run dependency audit
      run: pnpm audit --audit-level moderate
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
        
    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v2
      with:
        languages: javascript, typescript
        
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2
      
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [quality-analysis, security-scan]
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: nubemgenesis_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Setup pnpm
      uses: pnpm/action-setup@v2
      with:
        version: ${{ env.PNPM_VERSION }}
        
    - name: Install dependencies
      run: pnpm install --frozen-lockfile
      
    - name: Run database migrations
      run: pnpm run db:migrate
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nubemgenesis_test
        REDIS_URL: redis://localhost:6379
        
    - name: Run integration tests
      run: pnpm run test:integration
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/nubemgenesis_test
        REDIS_URL: redis://localhost:6379
        NODE_ENV: test
        
  performance-tests:
    name: Performance Testing
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        
    - name: Install Artillery
      run: npm install -g artillery@latest
      
    - name: Run performance tests
      run: artillery run ./tests/performance/load-test.yml
      
    - name: Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: ./tests/performance/results/
        
  quality-gate:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: [quality-analysis, security-scan, integration-tests]
    
    steps:
    - name: Quality Gate Passed
      run: |
        echo "âœ… All quality gates passed!"
        echo "ðŸ”’ Security: PASSED"
        echo "ðŸ§ª Tests: PASSED" 
        echo "ðŸ“Š Coverage: PASSED"
        echo "ðŸš€ Ready for deployment"