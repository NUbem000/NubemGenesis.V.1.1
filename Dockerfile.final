# Etapa de compilación
FROM node:20-alpine AS builder

# Instalar dependencias del sistema necesarias
RUN apk add --no-cache python3 make g++ git alpine-sdk

WORKDIR /app

# Instalar pnpm
RUN npm install -g pnpm

# Copiar archivos de configuración
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./

# Copiar package.json de cada workspace
COPY packages/server/package.json ./packages/server/
COPY packages/ui/package.json ./packages/ui/
COPY packages/components/package.json ./packages/components/
COPY packages/api-documentation/package.json ./packages/api-documentation/

# Copiar custompackages
COPY packages/server/custompackages ./packages/server/custompackages

# Instalar dependencias con --no-frozen-lockfile para permitir actualizaciones
RUN pnpm install --no-frozen-lockfile

# Instalar dependencias faltantes específicamente
RUN cd packages/ui && pnpm add @uiw/react-codemirror @tiptap/core

# Copiar todo el código fuente
COPY . .

# Construir la aplicación
RUN pnpm build

# Etapa de producción
FROM node:20-alpine

RUN apk add --no-cache tini

WORKDIR /app

# Copiar archivos construidos
COPY --from=builder /app/package.json ./
COPY --from=builder /app/pnpm-lock.yaml ./
COPY --from=builder /app/pnpm-workspace.yaml ./
COPY --from=builder /app/packages ./packages
COPY --from=builder /app/node_modules ./node_modules

# Configurar usuario
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

USER nodejs

# Variables de entorno
ENV NODE_ENV=production
ENV FLOWISE_HOST=0.0.0.0
ENV PORT=3000

EXPOSE 3000

ENTRYPOINT ["/sbin/tini", "--"]
CMD ["node", "packages/server/dist/index.js"]